;; -*-Lisp-*-

(setq frame-alist
      '(
        (width . 80)
        (height . 60)
        (internal-border-width . 20)
        (vertical-scroll-bars . nil)))
(setq default-frame-alist frame-alist
      initial-frame-alist frame-alist)

;; Visual cleanup
(fringe-mode '(8 . 4))
(scroll-bar-mode -1)
(setq-default truncate-lines t)
(setq ring-bell-function 'ignore)
(setq frame-title-format '("\n"))
(setq initial-scratch-message "")
(setq ns-use-proxy-icon nil)
(tool-bar-mode -1)
(setq-default fringe-indicator-alist nil)
(defun display-startup-echo-area-message ()
  "Redefine to clean up echo area message."
  (message ""))

(setq mac-option-modifier 'meta)
(global-set-key (kbd "s-}") #'ns-prev-frame)
(global-set-key (kbd "s-{") #'ns-next-frame)
(global-set-key (kbd "s-t") #'make-frame)

(load "~/.config/emacs/layers/straight" nil t)
(use-package construction-paper-theme
  :straight (construction-paper-theme :type git :host github :repo "matthias-margush/construction-paper-emacs")

  :init
  (defun me/modeline-style-line (&optional arg)
    "Style the mode line a simple line."
    (set-face-attribute 'mode-line nil :background nil :foreground nil :underline t :box nil)
    (set-face-attribute 'mode-line nil :inherit 'default :underline t)
    (set-face-attribute 'mode-line-inactive nil :background nil :foreground nil :underline t :box nil)
    (set-face-attribute 'mode-line-inactive nil :inherit 'default :underline t))

  (setq-default mode-line-format '(""))
  (advice-add 'enable-theme :after #'me/modeline-style-line)
  (add-to-list 'after-make-frame-functions #'me/modeline-style-line)

  :config
  (require 'construction-paper-theme)
  (construction-paper-theme-light))

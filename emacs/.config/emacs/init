;; -*- mode: emacs-lisp; lexical-binding: t; -*-

(unless (display-graphic-p)
  (menu-bar-mode -1))

(set-face-attribute 'variable-pitch nil :font "Open Sans Condensed-16")
(set-face-attribute 'fixed-pitch nil :font "Hasklug Nerd Font Mono-10")
(set-face-attribute 'default nil :font "Hasklug Nerd Font Mono-10")

(setq-default indent-tabs-mode nil)

(defun me/my-project-notes ()
  "Project file"
  (interactive "P")
  (let ((projects (expand-file-name "~/project.org")))
    (if (and projects (file-exists-p projects))
      (find-file projects))))

(load "~/.config/emacs/layers/evil" nil t)
(load "~/.config/emacs/layers/org" nil t)
(me/my-project-notes)

(load "~/.config/emacs/layers/selections" nil t)
(load "~/.config/emacs/layers/completion" nil t)
(load "~/.config/emacs/layers/tabbar" nil t)
(load "~/.config/emacs/layers/ui" nil t)
(load "~/.config/emacs/layers/shell" nil t)
(load "~/.config/emacs/layers/git" nil t)
(load "~/.config/emacs/layers/projects" nil t)
(load "~/.config/emacs/layers/neotree" nil t)
(load "~/.config/emacs/layers/lisp" nil t)
(load "~/.config/emacs/layers/languages" nil t)
(load "~/.config/emacs/layers/clojure" nil t)
(load "~/.config/emacs/layers/help" nil t)

(use-package origami
  :demand t
  :after evil
  :general
  (:states '(normal) "zo"
           (lambda ()
             (interactive)
             (save-excursion
               (goto-char (point-at-bol))
               (goto-char (point-at-eol))
               (origami-open-node (current-buffer) (point)))))
  (:states '(normal) "zc"
           (lambda ()
             (interactive)
             (save-excursion
               (origami-forward-fold)
               (goto-char (point-at-bol))
               (goto-char (point-at-eol))
               (origami-close-node (current-buffer) (point)))))
  (:states '(normal) "za"
           (lambda ()
             (interactive)
             (origami-forward-toggle-node (current-buffer) (point))))
  ;; (:states '(normal) "<tab>"
  ;;          (lambda ()
  ;;            (interactive)
  ;;            (save-excursion
  ;;              (origami-forward-toggle-node (current-buffer) (point)))))

  ;; (:states '(normal) "S-<tab>" #'origami-recursively-toggle-node)

  (:states '(normal) "zA" #'origami-recursively-toggle-node)
  (:states '(normal) "zO" #'origami-recursively-toggle-node)
  (:states '(normal) "zC" #'origami-recursively-toggle-node)
  (:states '(normal) "zM" #'origami-toggle-all-nodes)
  (:states '(normal) "zR" #'origami-toggle-all-nodes)

  :config
  (global-origami-mode))

(use-package envrc
  :config (envrc-global-mode))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(inhibit-startup-screen t)
 '(org-hide-emphasis-markers t)
 '(org-hide-leading-stars t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
(put 'narrow-to-region 'disabled nil)
(put 'scroll-left 'disabled nil)
